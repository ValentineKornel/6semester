select SYS_CONTEXT('USERENV', 'CON_NAME') as current_pdb from dual;
select SYS_CONTEXT('USERENV', 'SERVICE_NAME') as current_pdb from dual;
ALTER SESSION SET CONTAINER =  ORCLPDB1;

CREATE SEQUENCE user_seq 
    START WITH 1 
    INCREMENT BY 1 
    NOCACHE 
    NOCYCLE;

CREATE TABLE "USER" (
    id NUMBER PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    surname VARCHAR2(100) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    role VARCHAR2(50) NOT NULL,
    salary NUMBER CHECK (salary >= 0),
    CONSTRAINT chk_user_role CHECK (role IN ('Admin', 'Manager', 'Employee'))
);

CREATE OR REPLACE TRIGGER user_before_insert
BEFORE INSERT ON "USER"
FOR EACH ROW
BEGIN
    IF :NEW.id IS NULL THEN
        SELECT user_seq.NEXTVAL INTO :NEW.id FROM dual;
    END IF;
END;


CREATE SEQUENCE project_seq 
    START WITH 1 
    INCREMENT BY 1 
    NOCACHE 
    NOCYCLE;

CREATE TABLE Project (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR2(100) NOT NULL,
    description VARCHAR2(255),
    start_date DATE NOT NULL,
    deadline DATE NOT NULL,
    manager_id NUMBER NOT NULL,
    CONSTRAINT fk_project_manager FOREIGN KEY (manager_id) 
        REFERENCES "USER"(id) ON DELETE SET NULL,
    CONSTRAINT chk_project_dates CHECK (start_date <= deadline)
);

CREATE OR REPLACE TRIGGER project_before_insert
BEFORE INSERT ON Project
FOR EACH ROW
BEGIN
    IF :NEW.id IS NULL THEN
        SELECT project_seq.NEXTVAL INTO :NEW.id FROM dual;
    END IF;
END;


CREATE SEQUENCE task_seq 
    START WITH 1 
    INCREMENT BY 1 
    NOCACHE 
    NOCYCLE;

CREATE TABLE Task (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR2(100) NOT NULL,
    description VARCHAR2(255),
    creation_date DATE NOT NULL,
    deadline DATE NOT NULL,
    status VARCHAR2(50) NOT NULL,
    type VARCHAR2(50) NOT NULL,
    project_id NUMBER NOT NULL,
    creator_id NUMBER NOT NULL,
    executor_id NUMBER,
    CONSTRAINT fk_task_project FOREIGN KEY (project_id) 
        REFERENCES Project(id) ON DELETE CASCADE,
    CONSTRAINT fk_task_creator FOREIGN KEY (creator_id) 
        REFERENCES "USER"(id),
    CONSTRAINT fk_task_executor FOREIGN KEY (executor_id)
    	REFERENCES "USER"(id) ON DELETE SET NULL,
    CONSTRAINT chk_task_status CHECK (status IN ('New', 'In Progress', 'Completed', 'Cancelled')),
    CONSTRAINT chk_task_dates CHECK (creation_date <= deadline)
);

DROP TRIGGER task_before_insert;
CREATE OR REPLACE TRIGGER task_before_insert
BEFORE INSERT ON Task
FOR EACH ROW
BEGIN
    IF :NEW.id IS NULL THEN
        SELECT task_seq.NEXTVAL INTO :NEW.id FROM dual;
    END IF;
END;


CREATE SEQUENCE report_seq 
    START WITH 1 
    INCREMENT BY 1 
    NOCACHE 
    NOCYCLE;

CREATE TABLE Report (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    task_id NUMBER NOT NULL,
    "date" DATE DEFAULT SYSDATE NOT NULL,
    description VARCHAR2(255) NOT NULL,
    status VARCHAR2(50) NOT NULL,
    file_url VARCHAR2(255),
    CONSTRAINT fk_report_task FOREIGN KEY (task_id) 
        REFERENCES Task(id) ON DELETE CASCADE,
    CONSTRAINT chk_report_status CHECK (status IN ('Draft', 'Submitted', 'Reviewed', 'Approved'))
);

CREATE OR REPLACE TRIGGER report_before_insert
BEFORE INSERT ON Task
FOR EACH ROW
BEGIN
    IF :NEW.id IS NULL THEN
        SELECT report_seq.NEXTVAL INTO :NEW.id FROM dual;
    END IF;
END;


CREATE SEQUENCE comment_seq 
    START WITH 1 
    INCREMENT BY 1 
    NOCACHE 
    NOCYCLE;

CREATE TABLE "COMMENT" (
    id NUMBER PRIMARY KEY,
    task_id NUMBER NOT NULL,
    user_id NUMBER NOT NULL,
    "date" DATE DEFAULT SYSDATE NOT NULL,
    text VARCHAR2(255) NOT NULL,
    CONSTRAINT fk_comment_task FOREIGN KEY (task_id) 
        REFERENCES Task(id) ON DELETE CASCADE,
    CONSTRAINT fk_comment_user FOREIGN KEY (user_id) 
        REFERENCES "USER"(id) ON DELETE CASCADE
);

CREATE OR REPLACE TRIGGER comment_before_insert
BEFORE INSERT ON "COMMENT"
FOR EACH ROW
BEGIN
    IF :NEW.id IS NULL THEN
        SELECT comment_seq.NEXTVAL INTO :NEW.id FROM dual;
    END IF;
END;

CREATE INDEX idx_report_date ON Report ("date");
SELECT * FROM Report WHERE "date" < SYSDATE;


CREATE OR REPLACE VIEW Task_Reports AS
SELECT r.id, r.task_id, t.title AS task_name, r."date", r.status
FROM Report r
JOIN Task t ON r.task_id = t.id;



CREATE OR REPLACE PROCEDURE insert_user(
    p_name VARCHAR2,
    p_surname VARCHAR2,
    p_email VARCHAR2,
    p_role VARCHAR2,
    p_salary NUMBER
) AS
BEGIN
    INSERT INTO "USER" (id, name, surname, email, role, salary)
    VALUES (user_seq.NEXTVAL, p_name, p_surname, p_email, p_role, p_salary);
    COMMIT;
END;


CREATE OR REPLACE PROCEDURE insert_project(
    p_title VARCHAR2,
    p_description VARCHAR2,
    p_start_date DATE,
    p_deadline DATE,
    p_manager_id NUMBER
) AS
BEGIN
    INSERT INTO Project (id, title, description, start_date, deadline, manager_id)
    VALUES (project_seq.NEXTVAL, p_title, p_description, p_start_date, p_deadline, p_manager_id);
    COMMIT;
END;


CREATE OR REPLACE PROCEDURE insert_task(
    p_title VARCHAR2,
    p_description VARCHAR2,
    p_creation_date DATE,
    p_deadline DATE,
    p_status VARCHAR2,
    p_type VARCHAR2,
    p_project_id NUMBER,
    p_creator_id NUMBER,
    p_executor_id NUMBER
) AS
BEGIN
    INSERT INTO Task (id, title, description, creation_date, deadline, status, type, project_id, creator_id, executor_id)
    VALUES (task_seq.NEXTVAL, p_title, p_description, p_creation_date, p_deadline, p_status, p_type, p_project_id, p_creator_id, p_executor_id);
    COMMIT;
END;


CREATE OR REPLACE PROCEDURE insert_report(
    p_task_id NUMBER,
    p_date DATE,
    p_description VARCHAR2,
    p_status VARCHAR2,
    p_file_url VARCHAR2
) AS
BEGIN
    INSERT INTO Report (id, task_id, "date", description, status, file_url)
    VALUES (report_seq.NEXTVAL, p_task_id, p_date, p_description, p_status, p_file_url);
    COMMIT;
END;


CREATE OR REPLACE PROCEDURE insert_comment(
    p_task_id NUMBER,
    p_user_id NUMBER,
    p_date DATE,
    p_text VARCHAR2
) AS
BEGIN
    INSERT INTO "COMMENT" (id, task_id, user_id, "date", text)
    VALUES (comment_seq.NEXTVAL, p_task_id, p_user_id, p_date, p_text);
    COMMIT;
END;

BEGIN
    insert_user('Иван', 'Иванов', 'ivanov@example.com', 'Admin', 7000);
    insert_user('Петр', 'Петров', 'petrov@example.com', 'Manager', 6000);
    insert_user('Алексей', 'Сидоров', 'sidorov@example.com', 'Employee', 5000);
    insert_user('Мария', 'Кузнецова', 'kuznetsova@example.com', 'Employee', 5200);
    insert_user('Ольга', 'Смирнова', 'smirnova@example.com', 'Employee', 4800);
    insert_user('Дмитрий', 'Васильев', 'vasiliev@example.com', 'Manager', 6100);
    insert_user('Сергей', 'Михайлов', 'mikhailov@example.com', 'Employee', 5300);
    insert_user('Анна', 'Федорова', 'fedorova@example.com', 'Employee', 4900);
    insert_user('Виктор', 'Тихонов', 'tikhonov@example.com', 'Manager', 6200);
    insert_user('Елена', 'Орлова', 'orlova@example.com', 'Employee', 4700);
END;

BEGIN
    insert_user('Иван3', 'Иванов3', 'ivanov3@example.com', 'Employee', 7000);
END;
BEGIN
	get_users();
END;
SELECT * FROM "USER";

BEGIN
    insert_project('CRM-система', 'Разработка CRM для компании', TO_DATE('2025-03-01', 'YYYY-MM-DD'), TO_DATE('2025-09-01', 'YYYY-MM-DD'), 2);
    insert_project('Мобильное приложение', 'Разработка мобильного приложения', TO_DATE('2025-04-01', 'YYYY-MM-DD'), TO_DATE('2025-10-01', 'YYYY-MM-DD'), 6);
    insert_project('Корпоративный портал', 'Создание внутреннего портала', TO_DATE('2025-02-15', 'YYYY-MM-DD'), TO_DATE('2025-08-15', 'YYYY-MM-DD'), 9);
    insert_project('Система аналитики', 'Разработка BI-инструмента', TO_DATE('2025-05-01', 'YYYY-MM-DD'), TO_DATE('2025-11-01', 'YYYY-MM-DD'), 2);
    insert_project('Интернет-магазин', 'Создание e-commerce платформы', TO_DATE('2025-03-15', 'YYYY-MM-DD'), TO_DATE('2025-07-15', 'YYYY-MM-DD'), 6);
    insert_project('ERP-система', 'Разработка ERP-решения', TO_DATE('2025-06-01', 'YYYY-MM-DD'), TO_DATE('2025-12-01', 'YYYY-MM-DD'), 9);
    insert_project('HRM-система', 'Разработка системы для HR', TO_DATE('2025-07-01', 'YYYY-MM-DD'), TO_DATE('2026-01-01', 'YYYY-MM-DD'), 2);
    insert_project('Система учета', 'Автоматизация учета', TO_DATE('2025-08-01', 'YYYY-MM-DD'), TO_DATE('2026-02-01', 'YYYY-MM-DD'), 6);
    insert_project('Платформа IoT', 'Разработка IoT платформы', TO_DATE('2025-09-01', 'YYYY-MM-DD'), TO_DATE('2026-03-01', 'YYYY-MM-DD'), 9);
    insert_project('Система мониторинга', 'Мониторинг серверов', TO_DATE('2025-10-01', 'YYYY-MM-DD'), TO_DATE('2026-04-01', 'YYYY-MM-DD'), 2);
END;

BEGIN
    insert_task('Разработка API', 'Создать REST API', SYSDATE, TO_DATE('2025-04-01', 'YYYY-MM-DD'), 'New', 'Development', 1, 1, 3);
    insert_task('Проектирование БД', 'Создать схему БД', SYSDATE, TO_DATE('2025-04-05', 'YYYY-MM-DD'), 'In Progress', 'Database', 1, 1, 4);
    insert_task('Создание UI', 'Разработать интерфейс', SYSDATE, TO_DATE('2025-04-10', 'YYYY-MM-DD'), 'New', 'Frontend', 2, 2, 5);
    insert_task('Разработка логики', 'Написать бизнес-логику', SYSDATE, TO_DATE('2025-04-15', 'YYYY-MM-DD'), 'New', 'Backend', 3, 2, 6);
    insert_task('Тестирование', 'Разработать тесты', SYSDATE, TO_DATE('2025-04-20', 'YYYY-MM-DD'), 'New', 'Testing', 4, 3, 7);
    insert_task('Документирование', 'Создать документацию', SYSDATE, TO_DATE('2025-04-25', 'YYYY-MM-DD'), 'New', 'Documentation', 5, 3, 8);
    insert_task('Развертывание', 'Настроить сервер', SYSDATE, TO_DATE('2025-04-30', 'YYYY-MM-DD'), 'New', 'DevOps', 6, 4, 9);
    insert_task('Обратная связь', 'Собрать отзывы', SYSDATE, TO_DATE('2025-05-01', 'YYYY-MM-DD'), 'New', 'Support', 7, 4, 10);
    insert_task('Оптимизация', 'Оптимизировать код', SYSDATE, TO_DATE('2025-05-05', 'YYYY-MM-DD'), 'New', 'Performance', 8, 5, 3);
    insert_task('Интеграция', 'Связать с внешними сервисами', SYSDATE, TO_DATE('2025-05-10', 'YYYY-MM-DD'), 'New', 'Integration', 9, 5, 4);
END;

BEGIN
    insert_report(1, SYSDATE, 'Прогресс на 50%', 'Submitted', 'https://example.com/report1.pdf');
    insert_report(2, SYSDATE, 'Схема БД готова', 'Reviewed', 'https://example.com/report2.pdf');
    insert_report(3, SYSDATE, 'Создан первый UI макет', 'Draft', 'https://example.com/report3.pdf');
    insert_report(4, SYSDATE, 'Бизнес-логика написана', 'Submitted', 'https://example.com/report4.pdf');
    insert_report(5, SYSDATE, 'Тесты проходят успешно', 'Reviewed', 'https://example.com/report5.pdf');
    insert_report(6, SYSDATE, 'Документация готова', 'Approved', 'https://example.com/report6.pdf');
    insert_report(7, SYSDATE, 'Сервер развернут', 'Submitted', 'https://example.com/report7.pdf');
    insert_report(8, SYSDATE, 'Собраны отзывы пользователей', 'Reviewed', 'https://example.com/report8.pdf');
    insert_report(9, SYSDATE, 'Производительность улучшена', 'Approved', 'https://example.com/report9.pdf');
    insert_report(10, SYSDATE, 'Интеграция завершена', 'Submitted', 'https://example.com/report10.pdf');
END;

BEGIN
    insert_comment(1, 3, SYSDATE, 'Отличная работа!');
    insert_comment(2, 4, SYSDATE, 'Добавьте индексы в БД');
    insert_comment(3, 5, SYSDATE, 'UI выглядит красиво');
    insert_comment(4, 6, SYSDATE, 'Хороший код');
    insert_comment(5, 7, SYSDATE, 'Тесты проходят без ошибок');
    insert_comment(6, 8, SYSDATE, 'Документация понятна');
    insert_comment(7, 9, SYSDATE, 'Сервер работает стабильно');
    insert_comment(8, 10, SYSDATE, 'Отзывы полезны');
    insert_comment(9, 3, SYSDATE, 'Код стал быстрее');
    insert_comment(10, 4, SYSDATE, 'Интеграция успешна');
END;


CREATE OR REPLACE PROCEDURE get_users AS
BEGIN
    FOR rec IN (SELECT id, name, surname, email, role, salary FROM "USER") LOOP
        DBMS_OUTPUT.PUT_LINE(rec.id || ' | ' || rec.name || ' | ' || rec.surname || ' | ' || rec.email || ' | ' || rec.role || ' | ' || rec.salary);
    END LOOP;
END;

CREATE OR REPLACE PROCEDURE get_projects AS
BEGIN
    FOR rec IN (SELECT id, title, description, start_date, deadline, manager_id FROM Project) LOOP
        DBMS_OUTPUT.PUT_LINE(rec.id || ' | ' || rec.title || ' | ' || rec.description || ' | ' || rec.start_date || ' | ' || rec.deadline || ' | ' || rec.manager_id);
    END LOOP;
END;

CREATE OR REPLACE PROCEDURE get_tasks AS
BEGIN
    FOR rec IN (SELECT id, title, description, creation_date, deadline, status, type, project_id, creator_id, executor_id FROM Task) LOOP
        DBMS_OUTPUT.PUT_LINE(rec.id || ' | ' || rec.title || ' | ' || rec.description || ' | ' || rec.creation_date || ' | ' || rec.deadline || ' | ' || rec.status || ' | ' || rec.type || ' | ' || rec.project_id || ' | ' || rec.creator_id || ' | ' || rec.executor_id);
    END LOOP;
END;

CREATE OR REPLACE PROCEDURE get_reports AS
BEGIN
    FOR rec IN (SELECT id, task_id, "date", description, status, file_url FROM Report) LOOP
        DBMS_OUTPUT.PUT_LINE(rec.id || ' | ' || rec.task_id || ' | ' || rec."date" || ' | ' || rec.description || ' | ' || rec.status || ' | ' || rec.file_url);
    END LOOP;
END;

CREATE OR REPLACE PROCEDURE get_comments AS
BEGIN
    FOR rec IN (SELECT id, task_id, user_id, "date", text FROM "COMMENT") LOOP
        DBMS_OUTPUT.PUT_LINE(rec.id || ' | ' || rec.task_id || ' | ' || rec.user_id || ' | ' || rec."date" || ' | ' || rec.text);
    END LOOP;
END;


BEGIN
	get_users();
	get_projects();
	get_tasks();
	get_reports();
	get_comments();
END;


CREATE OR REPLACE VIEW EmployeeTasks AS
SELECT 
    u.id AS employee_id,
    u.name AS employee_name,
    u.surname AS employee_surname,
    u.email AS employee_email,
    u.role AS employee_role,
    u.salary AS employee_salary,
    t.id AS task_id,
    t.title AS task_title,
    t.status AS task_status,
    t.description AS task_description,
    t.creation_date,
    t.deadline,
    t.status,
    t.type,
    t.project_id
FROM "USER" u
JOIN Task t ON u.id = t.executor_id
WHERE t.status in ('New', 'In Progress');

SELECT * FROM EmployeeTasks;


CREATE OR REPLACE FUNCTION get_project_completion_rate(p_project_id NUMBER)
RETURN NUMBER 
IS
    total_tasks NUMBER;
    completed_tasks NUMBER;
    completion_rate NUMBER;
BEGIN
    SELECT COUNT(*) INTO total_tasks 
    FROM Task 
    WHERE project_id = p_project_id;

    SELECT COUNT(*) INTO completed_tasks 
    FROM Task 
    WHERE project_id = p_project_id AND status = 'Completed';

    IF total_tasks = 0 THEN
        RETURN 0;
    ELSE
        completion_rate := (completed_tasks / total_tasks) * 100;
        RETURN completion_rate;
    END IF;
END;

SELECT get_project_completion_rate(1) FROM dual;



















